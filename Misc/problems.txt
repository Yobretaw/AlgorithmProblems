=================================================================================================
1.  Given an array of elements, return an array of values pertaining to how 
many elements are greater than that element remaining in the array.

Ex. [3,4,5,9,2,1, 3], return [3, 2, 1, 0, 1, 1, 0]
First element is 3 because 3<4,5,9. Second element is 2 because 4< 5,9 etc

----

比如第1题你可以这样：从后向前扫，每扫一个元素p就将其插入一个平衡二叉树T中，同时找到此时它在T中的位置。这可以在O(logN)时间内做到，所以最后的时间复杂度是O(NlogN)。

如无其他限制，这就是此题的最优时间复杂度。理由是：假如我现在有一个O(N)的算法A能找到“每个元素P之后大于P的元素个数”，那么我就也能很简单地找到一个“每个元素P之前大于P的元素个数”的O(N)解法A'（只要把数组逆转，再调用A，再将结果逆转回来即可）。那么，对任何数组，我只要对其先应用算法A，再应用算法A'，然后将两者得到的结果相应元素相加，我就得到了“每个元素P之前和之后大于P的元素数目”，也就是“P的逆序下标”。换言之，我们就得到了一个O(N)的能够对任意数组排序的算法。这是不可能的，因此，算法A的最低复杂度不可能小于O(NlogN)。

=================================================================================================
2.  Given a string which only contains lowercase. You need delete the  repeated letters only leave
one, and try to make the lexicographical order of new string is smallest.

Ex. bcabc
Delete the first 'b' and first 'c', the new string will be abc which is smallest.

-----

第二题比较interesting，想了几分钟，答案如下：
先scan一遍这个string，用一个map记录一下每种character出现次数。
对于bcabc，a出现一次，b出现两次，c出现两次。
然后开始扫描，用删除的可行性来定位第一个元素。显然第一个元素要越小越好：
for(int i=0, i<string.size();i++) // 从头扫描。
  if(delete all characters from 0 to i is feasible) // 根据记录的map，确定删除0到i的元素是否可行。
    record the current smallest character // 这个character就是new string的第一个元素。
对于bcabc这个例子，可以发现删除前三个元素都是可行的，其中a是最小元素。
之后，将发现的最小的可删除元素之前的所有character删除，把它的之后的replication也删除。
比如bcabcdabc，删除第一个a之前的元素，删除之后重复的a，得到abcdbc
对于上面过程重复元素的个数的次数就好(对于bcdbc重复三次，因为还有bcd三个元素)。

=================================================================================================
3.  Given 2 large number A and B, create a new number C using the digits 
from A which needs to be grater than B. （修正： 应该增加一个条件，C越小越好。不然太简单了。你懂的。）

e.g. A = 5281, B = 7443
C = 8125.
=================================================================================================
4.  Given an integer:N and an array int arr[], you have to add some
elements to the array so that you can generate from 1 to N by using
(add) the elements in the array.

Please keep in mind that you can only use each element in the array once 
when generating a certain x (1<=x<=N). Return the count of the least adding 
numbers.

For example:
N=6, arr = [1, 3]
1 is already in arr.
add 2 to the arr.
3 is already in arr
4 = 1 + 3
5 = 2 + 3
6 = 1 + 2 + 3
So we return 1 since we only need to add one element which is 2.

----

Sort the numbers and traverse from starting keeping a cumulative sum of numbers found so far(including numbers added). At any point the cumulative sum value denotes the largest number that we can get by adding numbers in the array.


static int NumbersToAdd(int[] elements, int last)
{
	int size = elements.length;
	int addedNums = 0;
	int cum_sum = 0;
	int i = 0;
	while(i<size || cum_sum < last)
	{
		if(i>=size || elements[i] > cum_sum + 1)
		{
			addedNums++;
			int number_added = cum_sum + 1;
			cum_sum += number_added ;
		}
		else
		{
			cum_sum += elements[i];
			i++;
		}
	}
	
	return addedNums;
}
=================================================================================================
